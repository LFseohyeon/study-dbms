LIKE : 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.*/
	[컬럼명] LIKE '';
	- %: 모든 것
	-  _: 글자 수
예) 
	- '%A'   : A로 끝나는 모든 값
	- 'A%'   : A로 시작하는 모든 값
	- '%A%': A가 포함된 모든 값
	- 'A__': A로 시작하고 3글자인 값   
	- '_A'   : A로 끝나고 2글자인 값

집계 함수: 결과는 무조건 1개
	※ NULL은 포함시키지 않는다.
	※ WHERE절에서 사용 불가.
  
	- 평균   : AVG()
	- 최대값   : MAX()
	- 최소값   : MIN()
	- 총 합   : SUM()
	- 개수   : COUNT()

정렬
	- ORDER BY 컬럼명, ... ASC   : 오름 차순
	- ORDER BY 컬럼명, ... DESC   : 내림 차순

GROUP BY: ~별 (예: 포지션 별 평균 키)
	GROUP BY 컬럼명 HAVING 조건식
		※ WHERE절에 우선적으로 처리할 조건식을 작성해야 속도가 빠르다.
		※ HAVING절에서는 집계함수 사용 가능

SUB QUERY
  
	FROM절: IN LINE VIEW
	SELECT절: SCALAR SUB QUERY
	WHERE절: SUB QUERY

JOIN
	- 여러 테이블에 흩어져 있는 정보 중
	- 사용자가 필요한 정보만 가져와서 가상의 테이블처럼 만들고 결과를 보여주는 것.
	- 정규화를 통해 조회 테이블이 너무 많이 쪼개져 있으면 작업이 불편하기 때문에
	- 입력, 수정, 삭제의 성능을 향상시키기 위해서 JOIN을 통해 합친 후 사용한다.

SQL 실행 순서
	FROM > ON > JOIN > WHERE > GROUP BY > HAVING > SELECT > ORDER BY

VIEW
	문법 : CREATE VIEW 이름 AS 쿼리문

	기존의 테이블을 그대로 놔둔 채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블.
	실제 데이터가 저장되는 것은 아니지만 VIEW를 통해서 데이터를 관리할 수 있다.
 
	- 독립성 : 다른 곳에서 접근하지 못하도록 하는 성질
	- 편리성 : 길고 복잡한 쿼리문을 매번 작성할 필요가 없다.
	- 보안성 : 기존의 쿼리문이 보이지 않는다.
